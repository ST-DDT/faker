import { bind } from '../bind';
import type { FakerCore } from '../fakerCore';
import { fakerCore } from '../fakerCore';

/**
 * Returns a single random number in the given range.
 * The bounds are inclusive.
 *
 * @param fakerCore The faker core to use.
 * @param options Maximum value or options object.
 * @param options.min Lower bound for generated number. Defaults to `0`.
 * @param options.max Upper bound for generated number. Defaults to `min + 99999`.
 *
 * @throws When options define `max < min`.
 *
 * @example
 * numberFn(fakerCore) // 55422
 * numberFn(fakerCore, { min: 1000000 }) // 1031433
 * numberFn(fakerCore, { max: 100 }) // 42
 * numberFn(fakerCore, { min: 10, max: 100}) // 36
 *
 * @since 8.0.0
 */
export function numberFn(
  fakerCore: FakerCore,
  options: { min?: number; max?: number } = {}
): number {
  const { min = 0, max = min + 99999 } = options;
  return fakerCore.mersenne.next({ min, max });
}

// The following part is generated by `pnpm run generate:some-script`

/**
 * Returns a single random number in the given range.
 * The bounds are inclusive.
 *
 * @param options Maximum value or options object.
 * @param options.min Lower bound for generated number. Defaults to `0`.
 * @param options.max Upper bound for generated number. Defaults to `min + 99999`.
 *
 * @throws When options define `max < min`.
 *
 * @example
 * fakerNumber() // 55422
 * fakerNumber(100) // 52
 * fakerNumber({ min: 1000000 }) // 1031433
 * fakerNumber({ max: 100 }) // 42
 * fakerNumber({ min: 10, max: 100}) // 36
 *
 * @since 8.0.0
 */
export const fakerNumber: (options?: { min?: number; max?: number }) => number =
  bind(fakerCore, numberFn);
