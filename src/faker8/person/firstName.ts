import type { SexType } from 'src/modules/person';
import { bind } from '../bind';
import type { LocalizedFakerCore } from '../fakerCore';
import { localizedFakerCore } from '../fakerCore';
import { arrayElementFn } from '../helpers/arrayElement';

/**
 * Returns a random first name.
 *
 * @param fakerCore The faker core to use.
 * @param sex The optional sex to use.
 * Can be either `'female'` or `'male'`.
 *
 * @see fakerFirstName
 *
 * @example
 * firstNameFn(fakerCore) // 'Antwan'
 * firstNameFn(fakerCore, 'female') // 'Victoria'
 * firstNameFn(fakerCore, 'male') // 'Tom'
 *
 * @since 8.0.0
 */
export function firstNameFn(
  fakerCore: LocalizedFakerCore,
  sex?: SexType
): string {
  // selectDefinitions(...)
  const definitions: string[] = sex
    ? sex === 'female'
      ? fakerCore.definitions.person.female_first_name
      : fakerCore.definitions.person.male_first_name
    : fakerCore.definitions.person.first_name;

  return arrayElementFn(fakerCore, definitions);
}

// The following part is generated by `pnpm run generate:some-script`

/**
 * Returns a random first name.
 *
 * @alias faker.name.firstName
 * @alias fakerName.firstName
 *
 * @param sex The optional sex to use.
 * Can be either `'female'` or `'male'`.
 *
 * @example
 * fakerFirstName() // 'Antwan'
 * fakerFirstName('female') // 'Victoria'
 * fakerFirstName('male') // 'Tom'
 *
 * @since 8.0.0
 */
export const fakerFirstName: (sex?: SexType) => string = bind(
  localizedFakerCore,
  firstNameFn
);
